{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","about","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","trim","replace","split","filter","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","prototypes","PropTypes","string","isRequired","defaultProps","App","setmode","setalert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.33bd1285.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n            {/* <Link className=\"nav-link\" to=\"/about\">{props.about}</Link> */}\r\n            <a className=\"nav-link\" href=\"/about\">{props.about}</a>\r\n            </li>\r\n        </ul>\r\n        {/* <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button> \r\n            {/* succes-green primary-blue danger-red color in bootstrap */}\r\n        {/* </form> */}\r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`} >\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n        </div>\r\n        </div>\r\n    </div>\r\n</nav>\r\n  )\r\n}\r\n\r\nNavbar.prototypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string\r\n};\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    about: 'About'\r\n};","import React, {useState} from 'react'\r\n\r\n//useState is a hook\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        //console.log('upper case was clicked!');\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UpperCase\",\"success\");\r\n    }\r\n    const handleLowClick = () => {\r\n        //console.log('upper case was clicked!');\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to LowerCase\",\"success\");\r\n    }\r\n    const handleOnChange = (event) => {\r\n        //console.log('On Change');\r\n        setText(event.target.value);  // using this onChange event we will be able to change the text of that text area and update it too!\r\n    }\r\n\r\n    const clear = () => {\r\n        setText(\"\");\r\n        props.showAlert(\"Text Cleared\",\"success\");\r\n    }\r\n    const [text, setText] = useState(''); //state in react, react automatically keep track of the state variables and state variables can not be changed like normal variables we need to change those using function like here we have used setText\r\n  return (\r\n      <>\r\n        <div className='container' style={{color:props.mode==='dark'?'white':'#060543'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>        \r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLowClick}>Convert to LowerCase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={clear}>Clear Text</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n            <h1>Your text summary</h1>\r\n            <p>{text.trim()===\"\"?0:text.trim().replace(/\\n/g,\" \").split(\" \").filter(value => value !== \"\").length} Words, {text.trim().replace(/\\n/g,\" \").split(\"\").filter(value => value !== \" \").length} characters</p>\r\n            <p>{text.trim()===\"\"?0:text.trim().replace(/\\n/g,\" \").split(\" \").filter(value => value !== \"\").length * 0.008} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.trim().replace(/\\n/g,\" \").split(\"\").filter(value => value !== \" \").length>0 ? text: \"Enter something above to preview\"}</p>\r\n        </div>\r\n      </>\r\n    \r\n    \r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n    </div>\r\n  )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport React, {useState} from 'react'\n// import {\n//   BrowserRouter as Router,\n//   Route,\n//   Routes\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setmode] = useState('light'); //Whether Dark mode is enabled or not\n  const [alert, setalert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null)\n    }, 2000);\n  }\n\n  const toggleMode = () => {\n    if(mode === 'dark'){\n      setmode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      // document.title = \"TextUtils - Light Mode\";\n      /*setInterval(() => {\n        document.title = \"TextUtils is Amazing\";\n      }, 2000);\n      setInterval(() => {\n        document.title = \"Install TextUtils now\";\n      }, 1500);*/\n    }\n    else{\n      setmode('dark');\n      document.body.style.backgroundColor = '#060543';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      // document.title = \"TextUtils - Dark Mode\";\n    }\n  }\n  return (\n    // only one element can be returned, multiple can be returned using jsx fragment\n    <>    \n      {/* <Navbar title=\"TextUtils\" about=\"About TextUtils\"/> */}\n      {/* <Navbar/> */}\n      {/* <Router> */}\n        \n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n        <Alert alert={alert}/>\n        <div className=\"container my-3\" >\n          {/* <Routes> */}\n            {/* react always does partial matching for exact matching we use exact path\n            /users  --component1\n            /users/home --component2\n            */}\n              {/* <Route exact path=\"/about\" element={<About />}> */}\n                {/* {} */}\n              {/* </Route> */}\n              {/* <Route exact path=\"/\" element={<TextForm heading=\"Enter the text to analyse below\" mode={mode} showAlert={showAlert}/>}> */}\n                {<TextForm heading=\"Enter the text to analyse below\" mode={mode} showAlert={showAlert}/>}\n              {/* </Route> */}\n          {/* </Routes> */}\n\n        </div>\n      \n      {/* </Router> */}\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}